"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.lobstr = lobstr;
const signer_extension_api_1 = require("@lobstrco/signer-extension-api");
const signer_extension_api_2 = require("@lobstrco/signer-extension-api");
/**
 * Returns a connector object for the Lobstr wallet.
 * @returns {Connector} - The connector object.
 */
function lobstr() {
    const isAvailable = () => __awaiter(this, void 0, void 0, function* () {
        return (0, signer_extension_api_2.isConnected)();
    });
    const getLobstrPublicKey = () => __awaiter(this, void 0, void 0, function* () {
        if (!(yield (0, signer_extension_api_2.isConnected)())) {
            throw new Error(`Lobstr is not connected`);
        }
        return (0, signer_extension_api_2.getPublicKey)();
    });
    return {
        id: 'lobstr',
        name: 'Lobstr',
        iconUrl: 'https://stellar.creit.tech/wallet-icons/lobstr.svg',
        iconBackground: '#fff',
        // TODO: Check this
        installed: true,
        downloadUrls: {
            browserExtension: 'https://lobstr.co/',
        },
        isConnected() {
            return (0, signer_extension_api_1.isConnected)();
        },
        getNetworkDetails() {
            let blankNetwork = {
                network: '',
                networkUrl: '',
                networkPassphrase: '',
            };
            return Promise.resolve(blankNetwork);
        },
        getPublicKey() {
            return getLobstrPublicKey();
        },
        signTransaction(xdr, opts) {
            if (!isAvailable()) {
                throw new Error(`Lobstr is not connected`);
            }
            if ((opts === null || opts === void 0 ? void 0 : opts.network) !== 'mainnet') {
                console.warn(`Lobstr doesn't allow specifying the network that should be used, we skip the value`);
            }
            return (0, signer_extension_api_2.signTransaction)(xdr);
        },
    };
}
