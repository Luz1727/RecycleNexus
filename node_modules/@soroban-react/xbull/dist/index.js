"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.xbull = xbull;
const xbull_wallet_connect_1 = require("@creit.tech/xbull-wallet-connect");
/**
 * Returns a connector object for the XBull wallet.
 * @returns {Connector} - The connector object.
 */
function xbull() {
    // We create a dummy bridge for the server side rendering
    let bridge = {
        sign: (params) => {
            return Promise.resolve('');
        },
        connect: () => {
            return Promise.resolve('');
        },
        closeConnections: () => { },
    };
    // The actual bridge will be here and rendered only client side
    if (typeof window !== 'undefined') {
        bridge = new xbull_wallet_connect_1.xBullWalletConnect();
        console.log('########### Creating new wallet connect');
    }
    return {
        id: 'xbull',
        name: 'XBull',
        iconUrl: 'https://stellar.creit.tech/wallet-icons/xbull.svg',
        // iconUrl: async () => (await import('./freighter.svg')).default,
        iconBackground: '#fff',
        // TODO: Check this
        installed: true,
        downloadUrls: {
            browserExtension: 'https://xbull.app/download/',
        },
        isConnected() {
            return Promise.resolve((window === null || window === void 0 ? void 0 : window.xBullSDK) ? true : false);
        },
        getNetworkDetails() {
            let blankNetwork = {
                network: '',
                networkUrl: '',
                networkPassphrase: '',
            };
            return Promise.resolve(blankNetwork); // TODO REMOVE FREIGHTER
        },
        getPublicKey() {
            console.log('XBULL TRYING TO CONNCT');
            // const bridge = new xBullWalletConnect();
            let publicKeyPromise = bridge.connect();
            console.log('Bridge is', bridge);
            // bridge.closeConnections()
            return publicKeyPromise;
        },
        signTransaction(xdr, opts) {
            let signedTxPromise;
            // We have to check if both parameters are there according to the doc of xbullwalletconnect
            if ((opts === null || opts === void 0 ? void 0 : opts.network) && (opts === null || opts === void 0 ? void 0 : opts.accountToSign)) {
                // network value is the network passphrase for xBull
                signedTxPromise = bridge.sign({
                    xdr,
                    publicKey: opts === null || opts === void 0 ? void 0 : opts.accountToSign,
                    network: opts.networkPassphrase,
                });
            }
            else {
                signedTxPromise = bridge.sign({ xdr });
            }
            // bridge.closeConnections()
            return signedTxPromise;
        },
    };
}
